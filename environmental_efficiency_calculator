// 1) environmental efficiency (how much CO2 is emitted per kilometer)
// CO2 emitted per kilometer = CO2 emissions (kg) / distance (km)
// Assume only type of fuel used is Diesel
package com.environmental_efficiency;
import com.login.test;   // importing the class from a different file
import java.util.Scanner;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.time.LocalDate;

public class Environmental_Efficiency {
    public static double[] carbon_distance() {  // this method returns an Array of Doubles : carbon_emissions, distance_travelled
        Scanner in = new Scanner(System.in);
        double carbon_emissions = 0.0;  // declare carbon_emissions
        boolean valid = false;
        // similar to a while True loop to repeat the block of code until valid input is entered
        while (!valid) { // exception handling in case user enters invalid input
            System.out.print("Enter Carbon Emissions in Kilograms: ");  //  input is a String here
            try {  // exception handling in case user enters invalid input
                carbon_emissions = Double.parseDouble(in.nextLine()); // converts String carbon_emissions to Double
                System.out.printf("Carbon Emissions in Kilograms: %.2f kg\n", carbon_emissions);
                valid = true;
            } catch (NumberFormatException e) {    // handles the exception where the input is a,b,c instead of 123
                System.out.println("Invalid input");
            }
        }
        double distance_travelled = 0.0;
        boolean valid_1 = false;
        while (!valid_1) {
            System.out.println("Enter Total Distance Travelled in Kilometers: ");
            try{
                distance_travelled = Double.parseDouble(in.nextLine());  // convert String to Double
                System.out.printf("Distance Travelled: %.2f km\n", distance_travelled); // distance_travelled is an argument, not concatenation
                valid_1 = true; // exit loop
            } catch (NumberFormatException e) {
                System.out.println("Invalid input");
            }
        }
        return new double[]{carbon_emissions, distance_travelled};
    }
    public static double envi_effi_calc(double carbon_emissions, double distance_travelled){
        double envi_effi = carbon_emissions / distance_travelled;
        System.out.printf("Energy Efficiency: %.2f kg/km\n", envi_effi);
        return  envi_effi;
    }
    public static boolean warning_fuel_used(double carbon_emissions){
        // if the carbon emission is greater or equal to the highest record of carbon emissions
        if (carbon_emissions >= 7741.23){
            System.out.println("\nCarbon Emission is at dangerous levels. Please ensure the following statements are checked to" +
                    "make sure environmental efficiency is optimized to protect the marine environment.");
            System.out.println("\t1. Reduce unnecessary weight from the boat.");
            System.out.println("\t2. Do not leave the engine running idle.");
            System.out.println("\t3. Install a fuel flow meter to keep track of fuel efficiency in real time.");
            System.out.println("\t4. Tune your engine for better mileage.");
            System.out.println("\t5. Keep the bottom of the boat clean and barnacle-free");
            System.out.println("Please call the Department of Marine Environment at 019-9999999 for further information.");
            return true;
        }else{
            System.out.println("Keep up the good work!");
            return false;
        }
    }
    public static void print_in_txt_file(double carbon_emissions, double distance_travelled, double envi_effi, String ship_number, boolean warning) {
        try {
            String filename = "NG" + ship_number + ".txt";   // storing entry records into their respective ship number files
            BufferedWriter writer = new BufferedWriter(new FileWriter(filename, true));  // append to .txt file
            LocalDate current_date = LocalDate.now();  // to make individual records dated and specific
            writer.write("\n\t\t\t\t[ENVIRONMENTAL EFFICIENCY]");
            writer.write("\nDate: " + current_date + "\n");
            writer.write(String.format("Carbon Emissions: %.2f kg\n", carbon_emissions));
            writer.write(String.format("Total Distance Travelled: %.2f km\n", distance_travelled));
            writer.write(String.format("Energy Efficiency: %.2f kg/km\n", envi_effi));
            if (warning){
                writer.write("\n!! Dangerous levels of carbon emissions. !!");
            }
            writer.write("\n--------------------------------------------------------------");
            writer.close();
        }catch (IOException e) {
            e.printStackTrace();
        }

    }
    public static void main(String[] args) {  // call all methods here
        Scanner in = new Scanner(System.in);
        String ship_number; // declaring ship_number so that it can be in the do-while loop condition
        do {
            System.out.print("Enter Ship ID: ");   //must start with NG e.g. NG001
            ship_number = in.next();
        }
        while(!(ship_number.equals("1") ||  ship_number.equals("2") || ship_number.equals("5") || ship_number.equals("4")));
        test.shipType(ship_number);   // test.java is static so you can call it directly

        double[] values = carbon_distance();  // values = [carbon_emission, distance_travelled]
        double energy_efficiency = envi_effi_calc(values[0], values[1]);  // calling envi_effi_calc() with parameters from carbon_distance()
        boolean warning = warning_fuel_used(values[0]);

        print_in_txt_file(values[0], values[1], energy_efficiency, ship_number, warning);


    }

}
